// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=isAInstruction);
    Not(in=isAInstruction, out=isCInstruction);

    Mux16(a=instruction, b=aluOut, sel=isCInstruction, out=instMuxOut);

    And(a=isCInstruction, b=instruction[5], out=shouldLoadAFromAlu);//dest is set to D
    Or(a=isAInstruction, b=shouldLoadAFromAlu, out=loadAReg);
    ARegister(in=instMuxOut, load=loadAReg, out=ARegOut, out[0..14]=addressM);

    And(a=isCInstruction, b=instruction[4], out=shouldLoadDReg);//dest is set to D
    DRegister(in=aluOut, load=shouldLoadDReg, out=DRegOut);

    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=aluYIn);// select M or A as input to ALU
    ALU(x=DRegOut, y=aluYIn, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=aluOut, zr=isAluOutZero, ng=isAluOutNeg);

    And(a=isCInstruction, b=instruction[3], out=shouldWriteToM);//dest is set to M
    Mux(a=false, b=true, sel=shouldWriteToM, out=writeM);

    DMux8Way(in=true, sel=instruction[0..2], a=isNoJump, b=JGT, c=JEQ, d=JGE, e=JLT, f=JNE, g=JLE, h=JMP);
    
    // we have < 0, == 0 from alu
    Not(in=isAluOutZero, out=isAluOutNotZero);// != 0
    Not(in=isAluOutNeg, out=isAluOutNotNeg);// >= 0
    Or(a=isAluOutNeg, b=isAluOutZero, out=isAluOutNotPositive);// <= 0
    And(a=isAluOutNotNeg, b=isAluOutNotZero, out=isAluOutPositive);// > 0

    And(a=JGT, b=isAluOutPositive, out=shouldJGT);
    And(a=JEQ, b=isAluOutZero, out=shouldJEQ);
    And(a=JGE, b=isAluOutNotNeg, out=shouldJGE);
    And(a=JLT, b=isAluOutNeg, out=shouldJLT);
    And(a=JNE, b=isAluOutNotZero, out=shouldJNE);
    And(a=JLE, b=isAluOutNotPositive, out=shouldJLE);

    Or(a=shouldJGT, b=shouldJEQ, out=shouldJump1);
    Or(a=shouldJGE, b=shouldJLT, out=shouldJump2);
    Or(a=shouldJNE, b=shouldJLE, out=shouldJump3);

    Or(a=shouldJump1, b=shouldJump2, out= shouldJump4);
    Or(a=shouldJump3, b=shouldJump4, out=shouldJump5);
    Or(a=JMP, b=shouldJump5, out=shouldJump6);

    And(a=isCInstruction, b=shouldJump6, out=shouldJump);
    
    PC(in=ARegOut, load=shouldJump, inc=true, reset=reset, out[0..14]=pc);
}
